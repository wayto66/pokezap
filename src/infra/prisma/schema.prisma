// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                        Int        @id @default(autoincrement())
  phone                     String     @unique
  name                      String
  nickname                  String?
  spriteUrl                 String     @default("")
  elo                       Int        @default(1200)
  cash                      Int        @default(500)
  pokeShards                Int        @default(0)
  energy                    Int        @default(20)
  teamPokeId1               Int?       @unique
  teamPokeId2               Int?       @unique
  teamPokeId3               Int?       @unique
  teamPokeId4               Int?       @unique
  teamPokeId5               Int?       @unique
  teamPokeId6               Int?       @unique
  statusTrashed             Boolean    @default(false)
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now())
  ownedPokemons             Pokemon[]
  ownedItems                Item[]
  ownedHeldItems            HeldItem[]
  gameRooms                 GameRoom[]
  teamPoke1                 Pokemon?   @relation(name: "team-poke-1", fields: [teamPokeId1], references: [id])
  teamPoke2                 Pokemon?   @relation(name: "team-poke-2", fields: [teamPokeId2], references: [id])
  teamPoke3                 Pokemon?   @relation(name: "team-poke-3", fields: [teamPokeId3], references: [id])
  teamPoke4                 Pokemon?   @relation(name: "team-poke-4", fields: [teamPokeId4], references: [id])
  teamPoke5                 Pokemon?   @relation(name: "team-poke-5", fields: [teamPokeId5], references: [id])
  teamPoke6                 Pokemon?   @relation(name: "team-poke-6", fields: [teamPokeId6], references: [id])
  targetedPendentMessages   Message[]  @relation(name: "pendent")
  targetedFullfiledMessages Message[]  @relation(name: "fullfiled")
  invitedSessions           Session[]  @relation(name: "session-invited")
  createdSessions           Session[]  @relation(name: "session-creator")
  defeatedWildPokemons      Pokemon[]  @relation(name: "defeatedBy")
  ranAwayWildPokemons Pokemon[] @relation(name: "ranAwayFrom")
}

model Type {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  basePokemons1 BasePokemon[] @relation(name: "type 1")
  basePokemons2 BasePokemon[] @relation(name: "type 2")
  talents       Talent[]
  skills        Skill[]
}

model BasePokemon {
  id               Int       @id @default(autoincrement())
  pokedexId        Int
  name             String    @unique
  defaultSpriteUrl String
  shinySpriteUrl   String
  height           Int
  isFirstEvolution Boolean
  evolutionData    Json
  type1Name        String
  type2Name        String?
  BaseHp           Int
  BaseAtk          Int
  BaseDef          Int
  BaseSpAtk        Int
  BaseSpDef        Int
  BaseSpeed        Int
  BaseAllStats     Int
  BaseExperience   Int
  statusTrashed    Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  skills           Skill[]
  skillTable       String[]
  pokemons         Pokemon[]
  type1            Type      @relation(name: "type 1", fields: [type1Name], references: [name])
  type2            Type?     @relation(name: "type 2", fields: [type2Name], references: [name])
}

model Pokemon {
  id            Int         @id @default(autoincrement())
  ownerId       Int?
  basePokemonId Int
  gameRoomId    Int?
  nickName      String? 
  savage        Boolean
  level         Int
  experience    Int @default(0)
  spriteUrl     String @default("")
  hp            Int
  atk           Int
  def           Int
  spAtk         Int
  spDef         Int
  speed         Int
  isAdult       Boolean
  isMale        Boolean
  isShiny       Boolean @default(false)
  talentId1     Int
  talentId2     Int
  talentId3     Int
  talentId4     Int
  talentId5     Int
  talentId6     Int
  talentId7     Int
  talentId8     Int
  talentId9     Int
  parentId1     Int?
  parentId2     Int?
  childrenId1   Int?
  childrenId2   Int?
  childrenId3   Int?
  childrenId4   Int?
  heldItem      HeldItem?
  statusTrashed Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  teamSlot1     Player?     @relation(name: "team-poke-1")
  teamSlot2     Player?     @relation(name: "team-poke-2")
  teamSlot3     Player?     @relation(name: "team-poke-3")
  teamSlot4     Player?     @relation(name: "team-poke-4")
  teamSlot5     Player?     @relation(name: "team-poke-5")
  teamSlot6     Player?     @relation(name: "team-poke-6")
  defeatedBy    Player[]    @relation(name: "defeatedBy")
  ranAwayFrom   Player[]    @relation(name: "ranAwayFrom")
  skills        Skill[]     @relation(name: "activeSkills")
  talent1       Talent      @relation(name: "talent-1", fields: [talentId1], references: [id])
  talent2       Talent      @relation(name: "talent-2", fields: [talentId2], references: [id])
  talent3       Talent      @relation(name: "talent-3", fields: [talentId3], references: [id])
  talent4       Talent      @relation(name: "talent-4", fields: [talentId4], references: [id])
  talent5       Talent      @relation(name: "talent-5", fields: [talentId5], references: [id])
  talent6       Talent      @relation(name: "talent-6", fields: [talentId6], references: [id])
  talent7       Talent      @relation(name: "talent-7", fields: [talentId7], references: [id])
  talent8       Talent      @relation(name: "talent-8", fields: [talentId8], references: [id])
  talent9       Talent      @relation(name: "talent-9", fields: [talentId9], references: [id])
  owner         Player?     @relation(fields: [ownerId], references: [id])
  gameRoom      GameRoom?   @relation(fields: [gameRoomId], references: [id])
  baseData      BasePokemon @relation(fields: [basePokemonId], references: [id])
}

model Skill {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  typeName       String
  requiredLevel  Int
  attackPower    Int
  isPhysical     Boolean
  isSpecial      Boolean
  statusTrashed  Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  pokemonsLearn  BasePokemon[]
  pokemonsActive Pokemon[]     @relation(name: "activeSkills")
  type           Type          @relation(fields: [typeName], references: [name])
}

model Talent {
  id            Int       @id @default(autoincrement())
  typeName      String
  statusTrashed Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  pokemons1     Pokemon[] @relation(name: "talent-1")
  pokemons2     Pokemon[] @relation(name: "talent-2")
  pokemons3     Pokemon[] @relation(name: "talent-3")
  pokemons4     Pokemon[] @relation(name: "talent-4")
  pokemons5     Pokemon[] @relation(name: "talent-5")
  pokemons6     Pokemon[] @relation(name: "talent-6")
  pokemons7     Pokemon[] @relation(name: "talent-7")
  pokemons8     Pokemon[] @relation(name: "talent-8")
  pokemons9     Pokemon[] @relation(name: "talent-9")
  type          Type      @relation(fields: [typeName], references: [name])
}

model BaseItem {
  id            Int      @id @default(autoincrement())
  type          String
  name          String   @unique
  spriteUrl     String
  npcPrice      Int      @default(0)
  sellable      Boolean  @default(false)
  rarity        Int      @default(0)
  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  items         Item[]
}

model Item {
  id       Int      @id @default(autoincrement())
  ownerId  Int
  name     String
  amount   Int
  owner    Player   @relation(fields: [ownerId], references: [id])
  baseItem BaseItem @relation(fields: [name], references: [name])
}

model BaseHeldItem {
  id            Int        @id @default(autoincrement())
  type          String
  name          String     @unique
  spriteUrl     String
  npcPrice      Int        @default(0)
  sellable      Boolean    @default(false)
  rarity        Int        @default(0)
  statusTrashed Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  items         HeldItem[]
}

model HeldItem {
  id       Int          @id @default(autoincrement())
  ownerId  Int
  holderId Int          @unique
  name     String
  amount   Int
  holder   Pokemon?     @relation(fields: [holderId], references: [id])
  owner    Player       @relation(fields: [ownerId], references: [id])
  baseItem BaseHeldItem @relation(fields: [name], references: [name])
}

model Session {
  id            Int      @id @default(autoincrement())
  mode          String
  creatorId     Int
  invitedId     Int
  isInProgress  Boolean  @default(false)
  isFinished    Boolean  @default(false)
  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  creator       Player   @relation(name: "session-creator", fields: [creatorId], references: [id])
  invited       Player   @relation(name: "session-invited", fields: [invitedId], references: [id])
}

model GameRoom {
  id                Int            @id @default(autoincrement())
  mode              String
  phone             String         @unique
  level             Int
  experience        Int
  activeIncense     String?
  incenseCharges    Int?
  isInProgress      Boolean        @default(false)
  isFinished        Boolean        @default(false)
  statusTrashed     Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  players           Player[]
  activeWildPokemon Pokemon[]
  messages          Message[]
  upgrades          RoomUpgrades[]
}

model RoomUpgrades {
  id     Int              @id @default(autoincrement())
  baseId Int
  roomId Int
  base   BaseRoomUpgrades @relation(fields: [baseId], references: [id])
  room   GameRoom         @relation(fields: [roomId], references: [id])
}

model BaseRoomUpgrades {
  id          Int            @id @default(autoincrement())
  name        String
  bonusType   String
  bonusAmount Int
  imageUrl    String
  children    RoomUpgrades[]
}

model Message {
  id               Int       @id @default(autoincrement())
  msgId            String    @unique
  gameRoomId       Int?
  type             String
  body             String?
  actions          String[]
  createdAt        DateTime  @default(now())
  pendentTargets   Player[]  @relation(name: "pendent")
  fullfiledTargets Player[]  @relation(name: "fullfiled")
  gameRoom         GameRoom? @relation(fields: [gameRoomId], references: [id])
}
